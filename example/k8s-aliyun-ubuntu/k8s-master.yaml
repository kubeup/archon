apiVersion: archon.kubeup.com/v1
kind: InstanceGroup
metadata:
  name: k8s-master
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8s-master
  template:
    metadata:
      labels:
        app: k8s-master
      annotations:
        initializers: archon.kubeup.com/private-ip,archon.kubeup.com/public-ip
        aliyun.archon.kubeup.com/use-ssh: "true"
    spec:
      networkName: k8s-net
      instanceType: ecs.n1.tiny
      os: Ubuntu
      image: ubuntu_16_0402_64_40G_base_20170222.vhd
      files:
      - name: apt-pgp 
        path: "/tmp/kubernetes.pgp"
        content: |
          -----BEGIN PGP PUBLIC KEY BLOCK-----
          
          mQENBFUd6rIBCAD6mhKRHDn3UrCeLDp7U5IE7AhhrOCPpqGF7mfTemZYHf/5Jdjx
          cOxoSFlK7zwmFr3lVqJ+tJ9L1wd1K6P7RrtaNwCiZyeNPf/Y86AJ5NJwBe0VD0xH
          TXzPNTqRSByVYtdN94NoltXUYFAAPZYQls0x0nUD1hLMlOlC2HdTPrD1PMCnYq/N
          uL/Vk8sWrcUt4DIS+0RDQ8tKKe5PSV0+PnmaJvdF5CKawhh0qGTklS2MXTyKFoqj
          XgYDfY2EodI9ogT/LGr9Lm/+u4OFPvmN9VN6UG+s0DgJjWvpbmuHL/ZIRwMEn/tp
          uneaLTO7h1dCrXC849PiJ8wSkGzBnuJQUbXnABEBAAG0QEdvb2dsZSBDbG91ZCBQ
          YWNrYWdlcyBBdXRvbWF0aWMgU2lnbmluZyBLZXkgPGdjLXRlYW1AZ29vZ2xlLmNv
          bT6JAT4EEwECACgFAlUd6rICGy8FCQWjmoAGCwkIBwMCBhUIAgkKCwQWAgMBAh4B
          AheAAAoJEDdGwginMXsPcLcIAKi2yNhJMbu4zWQ2tM/rJFovazcY28MF2rDWGOnc
          9giHXOH0/BoMBcd8rw0lgjmOosBdM2JT0HWZIxC/Gdt7NSRA0WOlJe04u82/o3OH
          WDgTdm9MS42noSP0mvNzNALBbQnlZHU0kvt3sV1YsnrxljoIuvxKWLLwren/GVsh
          FLPwONjw3f9Fan6GWxJyn/dkX3OSUGaduzcygw51vksBQiUZLCD2Tlxyr9NvkZYT
          qiaWW78L6regvATsLc9L/dQUiSMQZIK6NglmHE+cuSaoK0H4ruNKeTiQUw/EGFaL
          ecay6Qy/s3Hk7K0QLd+gl0hZ1w1VzIeXLo2BRlqnjOYFX4A=
          =HVTm
          -----END PGP PUBLIC KEY BLOCK-----
      - name: run-kubeadm
        path: "/tmp/run-kubeadm"
        permissions: "0755"
        template: |
          cloud-init-per once aptaddsource apt-key add /tmp/kubernetes.pgp
          cloud-init-per once aptinstall /bin/sh -c "apt update && apt install -y docker.io kubelet kubeadm={{ index .Configs "k8s" "components-version" }} kubectl kubernetes-cni"

          KUBE_HYPERKUBE_IMAGE={{ index .Configs "k8s" "hyperkube-img" }} KUBE_ETCD_IMAGE={{ index .Configs "k8s" "etcd-img" }} KUBE_REPO_PREFIX={{ index .Configs "k8s" "repo-prefix" }} kubeadm init --skip-preflight-checks --config /tmp/kubeadm.conf 
          # Disable livenessProbe due to k8s issue#43784
          sed '/livenessProbe/,/timeoutSeconds/d' -i /etc/kubernetes/manifests/kube-apiserver.yaml
          # Replace controller manager manifest to allow mounting plugin volume
          mv /tmp/kube-controller-manager.yaml /etc/kubernetes/manifests/
      - name: kubeadm-config
        path: "/tmp/kubeadm.conf"
        template: |
          apiVersion: kubeadm.k8s.io/v1alpha1
          kind: MasterConfiguration
          networking:
            podSubnet: {{ index .Configs "k8s" "pod-ip-range" }}
          kubernetesVersion: {{ index .Configs "k8s" "k8s-version" }}
          token: {{ index .Configs "k8s" "token" }}
          authorizationMode: AlwaysAllow
      - name: kubelet-dropin
        path: "/etc/systemd/system/kubelet.service.d/99-archon-dropin.conf"
        template: |
          [Unit]
          Wants=flexv.service
          After=flexv.service
          [Service]
          Environment="KUBELET_NETWORK_ARGS=--network-plugin=kubenet"
          Environment="KUBELET_EXTRA_ARGS=--pod-infra-container-image={{ index .Configs "k8s" "pause-img"}} --volume-plugin-dir=/opt/k8s/volume/plugins"
      - name: unit-flexv
        path: "/etc/systemd/system/flexv.service"
        template: |-
          name: flexv.service
          content: |-
            [Service]
            ExecStart=/bin/sh -c 'FLEXPATH=/opt/k8s/volume/plugins/aliyun~flexv; sudo mkdir $FLEXPATH -p; docker run -v $FLEXPATH:/opt {{ index .Configs "k8s" "kube-aliyun-img" }} cp /flexv /opt/'
            Restart=on-failure
            User=root
            [Install]
            WantedBy=multi-user.target
      - name: kube-aliyun.yaml
        path: "/etc/kubernetes/manifests/kube-aliyun.yaml"
        permissions: "0664"
        owner: "root"
        template: |-
          apiVersion: v1
          kind: Pod
          metadata:
            name: aliyun-controller
            namespace: kube-system
          spec:
            hostNetwork: true
            containers:
            - name: aliyun-controller
              image: {{ index .Configs "k8s" "kube-aliyun-img" }}
              command:
              - /aliyun-controller
              - --kubeconfig=/etc/kubernetes/controller-manager.conf
              - --leader-elect=true
              - --cluster-cidr={{ index .Configs "k8s" "pod-ip-range" }}
              env:
              - name: ALIYUN_ACCESS_KEY
                value: {{ index .Configs "k8s" "aliyun-access-key" }}
              - name: ALIYUN_ACCESS_KEY_SECRET
                value: {{ index .Configs "k8s" "aliyun-access-key-secret" }}
              - name: ALIYUN_REGION
                value: {{ .Network.Spec.Region }}
              - name: ALIYUN_ZONE
                value: {{ .Network.Spec.Zone }}
              - name: ALIYUN_VPC
                value: {{ index .Network.Annotations "aliyun.archon.kubeup.com/vpc-id" }}
              - name: ALIYUN_ROUTER
                value: {{ index .Network.Annotations "aliyun.archon.kubeup.com/router-id" }}
              - name: ALIYUN_ROUTE_TABLE
                value: {{ index .Network.Annotations "aliyun.archon.kubeup.com/route-table-id" }}
              - name: ALIYUN_VSWITCH
                value: {{ index .Network.Annotations "aliyun.archon.kubeup.com/vswitch-id" }}
              volumeMounts:
              - mountPath: /etc/kubernetes/
                name: k8s
                readOnly: true
            volumes:
            - hostPath:
                path: /etc/kubernetes
              name: k8s
      - name: kube-controller-manager.yaml
        path: "/tmp/kube-controller-manager.yaml"
        permissions: "0664"
        owner: "root"
        template: |-
          apiVersion: v1
          kind: Pod
          metadata:
            creationTimestamp: null
            labels:
              component: kube-controller-manager
              tier: control-plane
            name: kube-controller-manager
            namespace: kube-system
          spec:
            containers:
            - command:
              - /hyperkube
              - controller-manager
              - --insecure-experimental-approve-all-kubelet-csrs-for-group=system:bootstrappers
              - --controllers=*,bootstrapsigner,tokencleaner
              - --root-ca-file=/etc/kubernetes/pki/ca.crt
              - --cluster-signing-key-file=/etc/kubernetes/pki/ca.key
              - --address=127.0.0.1
              - --leader-elect=true
              - --use-service-account-credentials=true
              - --kubeconfig=/etc/kubernetes/controller-manager.conf
              - --service-account-private-key-file=/etc/kubernetes/pki/sa.key
              - --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt
              - --allocate-node-cidrs=true
              - --cluster-cidr={{ index .Configs "k8s" "pod-ip-range" }}
              - --flex-volume-plugin-dir=/opt/k8s/volume/plugins
              - --configure-cloud-routes=false
              image: {{ index .Configs "k8s" "hyperkube-img" }}
              livenessProbe:
                failureThreshold: 8
                httpGet:
                  host: 127.0.0.1
                  path: /healthz
                  port: 10252
                  scheme: HTTP
                initialDelaySeconds: 15
                timeoutSeconds: 15
              name: kube-controller-manager
              env:
              - name: ALIYUN_ACCESS_KEY
                value: {{ index .Configs "k8s" "aliyun-access-key" }}
              - name: ALIYUN_ACCESS_KEY_SECRET
                value: {{ index .Configs "k8s" "aliyun-access-key-secret" }}
              volumeMounts:
              - mountPath: /etc/kubernetes/
                name: k8s
                readOnly: true
              - mountPath: /etc/ssl/certs
                name: certs
              - mountPath: /etc/pki
                name: pki
              - mountPath: /var/lock
                name: var-lock
              - mountPath: /opt/k8s
                name: k8s-opt
                readOnly: true
            hostNetwork: true
            volumes:
            - hostPath:
                path: /opt/k8s
              name: k8s-opt
            - hostPath:
                path: /etc/kubernetes
              name: k8s
            - hostPath:
                path: /etc/ssl/certs
              name: certs
            - hostPath:
                path: /etc/pki
              name: pki
            - hostPath:
                path: /var/lock
              name: var-lock
      - name: apt-source
        path: "/etc/apt/sources.list.d/kubernetes.list"
        content: |
          deb https://mirrors.ustc.edu.cn/kubernetes/apt/ kubernetes-xenial main
      - name: kubeadm
        path: "/config/runcmd/kubeadm"
        template: |-
          - /tmp/run-kubeadm
      configs:
      - name: k8s
        data:
          aliyun-access-key: ALIYUN_ACCESS_KEY
          aliyun-access-key-secret: ALIYUN_ACCESS_KEY_SECRET
          pause-img: registry.aliyuncs.com/archon/pause-amd64:3.0
          hyperkube-img: registry.aliyuncs.com/archon/hyperkube-amd64:v1.6.1
          kube-aliyun-img: registry.aliyuncs.com/kubeup/kube-aliyun
          components-version: 1.7.0-00
          k8s-version: v1.6.1
          etcd-img: registry.aliyuncs.com/archon/etcd:3.0.17
          repo-prefix: registry.aliyuncs.com/archon
          pod-ip-range: 10.244.0.0/16
          token: YOUR_KUBEADM_TOKEN
      users:
      - name: core

